{"version":3,"sources":["serviceWorker.ts","components/Button.tsx","components/Buttons.tsx","components/Display.tsx","components/Calculator.tsx","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","buttonStyle","css","Button","props","children","buttonsStyle","clearButtonStyle","wideButtonStyle","tallButtonStyle","Buttons","handleNumberEntry","e","numberEntry","target","value","handleModifierEntry","modifierEntry","onClick","allClear","id","clearEntry","calculateResult","decimalEntry","displayStyle","inputStyle","currentInputStyle","historicInputStyle","Display","currentInput","historicInput","calculatorStyle","arithmeticOperators","Calculator","useState","setCurrentInput","setHistoricInput","undefined","includes","result","evaluate","toString","lastCharEntered","slice","_historicInput","length","isNaN","sliceEnd","appStyle","App","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da0509af.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/** @jsx jsx */\r\n\r\nimport { MouseEvent, ReactNode } from 'react';\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nconst buttonStyle = css`\r\n  background-color: #333333;\r\n  border-color: #333333;\r\n  border-radius: 15px;\r\n  color: #fff;\r\n  min-height: 50px;\r\n  outline: none;\r\n  min-width: 55px;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport interface IButtonProps {\r\n  children: ReactNode;\r\n  value?: string | string[] | number;\r\n  onClick?: (event: MouseEvent<HTMLButtonElement>) => void;\r\n  id?: string;\r\n}\r\n\r\nexport default function Button(props: IButtonProps) {\r\n  return (\r\n    <button css={buttonStyle} {...props}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n}\r\n","/** @jsx jsx */\r\n\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nimport Button from './Button';\r\nimport { MouseEvent } from 'react';\r\n\r\nconst buttonsStyle = css`\r\n  display: grid;\r\n  grid-gap: 8px;\r\n  grid-template-columns: repeat(4, auto);\r\n  padding: 1rem;\r\n`;\r\n\r\nconst clearButtonStyle = css`\r\n  background-color: #b52d2d;\r\n  border-color: #b52d2d;\r\n`;\r\n\r\nconst wideButtonStyle = css`\r\n  grid-column-start: span 2;\r\n`;\r\n\r\nconst tallButtonStyle = css`\r\n  grid-row-start: span 2;\r\n`;\r\n\r\nexport interface IButtonsProps {\r\n  calculateResult: () => void;\r\n  modifierEntry: (value: string) => void;\r\n  numberEntry: (value: string) => void;\r\n  decimalEntry: () => void;\r\n  allClear: () => void;\r\n  clearEntry: () => void;\r\n}\r\n\r\nexport default function Buttons(props: IButtonsProps) {\r\n  const handleNumberEntry = (e: MouseEvent<HTMLButtonElement>) =>\r\n    props.numberEntry((e.target as HTMLButtonElement).value);\r\n\r\n  const handleModifierEntry = (e: MouseEvent<HTMLButtonElement>) =>\r\n    props.modifierEntry((e.target as HTMLButtonElement).value);\r\n\r\n  return (\r\n    <div css={buttonsStyle}>\r\n      <Button css={clearButtonStyle} onClick={props.allClear} id=\"clear\">\r\n        AC\r\n      </Button>\r\n      <Button css={clearButtonStyle} onClick={props.clearEntry}>\r\n        CE\r\n      </Button>\r\n      <Button value={'/'} onClick={handleModifierEntry} id=\"divide\">\r\n        &divide;\r\n      </Button>\r\n      <Button value={'*'} onClick={handleModifierEntry} id=\"multiply\">\r\n        x\r\n      </Button>\r\n      <Button value={'7'} onClick={handleNumberEntry} id=\"seven\">\r\n        7\r\n      </Button>\r\n      <Button value={'8'} onClick={handleNumberEntry} id=\"eight\">\r\n        8\r\n      </Button>\r\n      <Button value={'9'} onClick={handleNumberEntry} id=\"nine\">\r\n        9\r\n      </Button>\r\n      <Button value={'-'} onClick={handleModifierEntry} id=\"subtract\">\r\n        -\r\n      </Button>\r\n      <Button value={'4'} onClick={handleNumberEntry} id=\"four\">\r\n        4\r\n      </Button>\r\n      <Button value={'5'} onClick={handleNumberEntry} id=\"five\">\r\n        5\r\n      </Button>\r\n      <Button value={'6'} onClick={handleNumberEntry} id=\"six\">\r\n        6\r\n      </Button>\r\n      <Button value={'+'} onClick={handleModifierEntry} id=\"add\">\r\n        +\r\n      </Button>\r\n      <Button value={'1'} onClick={handleNumberEntry} id=\"one\">\r\n        1\r\n      </Button>\r\n      <Button value={'2'} onClick={handleNumberEntry} id=\"two\">\r\n        2\r\n      </Button>\r\n      <Button value={'3'} onClick={handleNumberEntry} id=\"three\">\r\n        3\r\n      </Button>\r\n      <Button css={tallButtonStyle} onClick={props.calculateResult} id=\"equals\">\r\n        =\r\n      </Button>\r\n      <Button\r\n        css={wideButtonStyle}\r\n        value={'0'}\r\n        onClick={handleNumberEntry}\r\n        id=\"zero\"\r\n      >\r\n        0\r\n      </Button>\r\n      <Button onClick={props.decimalEntry} id=\"decimal\">\r\n        .\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\r\n\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nconst displayStyle = css`\r\n  align-items: flex-end;\r\n  background-color: #dbdacc;\r\n  border: solid #294481;\r\n  border-radius: 15px;\r\n  color: #000;\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 1rem;\r\n  min-height: 80px;\r\n  padding-left: 5px;\r\n  padding-right: 5px;\r\n`;\r\n\r\nconst inputStyle = css`\r\n  overflow: hidden;\r\n  text-align: end;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  width: 100%;\r\n`;\r\n\r\nconst currentInputStyle = css`\r\n  font-size: 1.5em;\r\n`;\r\n\r\nconst historicInputStyle = css`\r\n  font-size: 0.75em;\r\n  margin-bottom: 5px;\r\n  margin-top: auto;\r\n`;\r\n\r\nexport interface IDisplayProps {\r\n  currentInput: string;\r\n  historicInput: string;\r\n}\r\n\r\nexport default function Display(props: IDisplayProps) {\r\n  return (\r\n    <div css={displayStyle}>\r\n      <span css={[inputStyle, currentInputStyle]} id=\"display\">\r\n        {props.currentInput}\r\n      </span>\r\n      <span css={[inputStyle, historicInputStyle]}>{props.historicInput}</span>\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\r\n\r\nimport { css, jsx } from '@emotion/core';\r\n\r\nimport Buttons from './Buttons';\r\nimport Display from './Display';\r\nimport { evaluate } from 'mathjs';\r\nimport { useState } from 'react';\r\n\r\nconst calculatorStyle = css`\r\n  background: #375cad;\r\n  border: solid #294481;\r\n  border-radius: 15px;\r\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\r\n  box-sizing: border-box;\r\n  max-width: 330px;\r\n  width: 90%;\r\n`;\r\n\r\nconst arithmeticOperators = {\r\n  add: '+',\r\n  subtract: '-',\r\n  multiply: '*',\r\n  divide: '/',\r\n  decimal: '.',\r\n  equals: '='\r\n};\r\n\r\nexport default function Calculator() {\r\n  const [currentInput, setCurrentInput] = useState('0');\r\n  const [historicInput, setHistoricInput] = useState('');\r\n\r\n  const calculateResult = () => {\r\n    if (\r\n      historicInput === undefined ||\r\n      currentInput === undefined ||\r\n      historicInput.includes(arithmeticOperators.equals)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const result = evaluate(historicInput + currentInput);\r\n    setHistoricInput(`${historicInput}${currentInput} = ${result}`);\r\n    setCurrentInput(result.toString());\r\n  };\r\n\r\n  const modifierEntry = (value: string) => {\r\n    const lastCharEntered = historicInput.slice(-1) as any;\r\n\r\n    // Don't allow the user to enter consecutive minus characters\r\n    if (\r\n      lastCharEntered === arithmeticOperators.subtract &&\r\n      value === arithmeticOperators.subtract\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // Strip off any trailing modifiers\r\n    let _historicInput = historicInput;\r\n    if (\r\n      historicInput.length !== 0 &&\r\n      currentInput.length === 0 &&\r\n      value !== arithmeticOperators.subtract &&\r\n      isNaN(lastCharEntered)\r\n    ) {\r\n      // If the user previous entered a modifier followed by a minus the\r\n      // second last character will also need replaced here.\r\n      const sliceEnd = isNaN(\r\n        historicInput.slice(historicInput.length - 2, -1) as any\r\n      )\r\n        ? -2\r\n        : -1;\r\n\r\n      _historicInput = historicInput.slice(0, sliceEnd);\r\n    }\r\n\r\n    if (historicInput.includes(arithmeticOperators.equals)) {\r\n      setHistoricInput(currentInput + value);\r\n    } else {\r\n      setHistoricInput(_historicInput + currentInput + value);\r\n    }\r\n    setCurrentInput('');\r\n  };\r\n\r\n  const numberEntry = (value: string) => {\r\n    setCurrentInput((currentInput === '0' ? '' : currentInput) + value);\r\n  };\r\n\r\n  const decimalEntry = () => {\r\n    if (currentInput.includes(arithmeticOperators.decimal)) return;\r\n    setCurrentInput(currentInput + arithmeticOperators.decimal);\r\n  };\r\n\r\n  const allClear = () => {\r\n    setHistoricInput('');\r\n    setCurrentInput('0');\r\n  };\r\n\r\n  const clearEntry = () => {\r\n    setCurrentInput('0');\r\n  };\r\n\r\n  return (\r\n    <div css={calculatorStyle}>\r\n      <Display currentInput={currentInput} historicInput={historicInput} />\r\n      <Buttons\r\n        calculateResult={calculateResult}\r\n        modifierEntry={modifierEntry}\r\n        numberEntry={numberEntry}\r\n        decimalEntry={decimalEntry}\r\n        allClear={allClear}\r\n        clearEntry={clearEntry}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","/** @jsx jsx */\n\nimport { css, jsx } from '@emotion/core';\n\nimport Calculator from './components/Calculator';\n\nconst appStyle = css`\n  align-items: center;\n  background-color: #bbdefb;\n  color: white;\n  display: flex;\n  flex-direction: column;\n  font-size: calc(10px + 2vmin);\n  justify-content: center;\n  min-height: 100vh;\n`;\n\nfunction App() {\n  return (\n    <div css={appStyle}>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","import './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}